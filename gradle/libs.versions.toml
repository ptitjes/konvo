[versions]
kotlin = "2.2.20-Beta2"
kotlinxDatetime = "0.7.1-0.6.x-compat"
kotlinxSerialization = "1.9.0"
kotlinxCoroutines = "1.10.2"
kotlinxAtomicfu = "0.29.0"
kotlinxIo = "0.7.0"
ktor = "3.1.3"

kotlinLogging = "7.0.7"
slf4j = "2.0.17"

koog = "0.3.0"
mcp = "0.5.0"
xemanticJsonSchema = "1.1.2"
uriKmp = "0.0.20"
kodein = "7.25.0"

# Compose Frontend
compose = "1.8.2"
composeHotReload = "1.0.0-beta04"

material3Adaptive = "1.1.2"
androidxLifecycleViewmodel = "2.9.1"

markdownRenderer = "0.35.0"
fileKit = "0.8.8"
coil = "3.3.0"

# Discord Frontend
kord = "feat-components-v2-didier-SNAPSHOT"

# For tools
shadow = "9.0.0-beta13"
kotlinxCli = "0.3.6"
ksoup = "0.2.3"
flexmark = "0.64.8"

[libraries]
kotlinGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlinxDatetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
kotlinxSerialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }
kotlinxCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
kotlinxCoroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinxCoroutines" }
kotlinxCoroutinesSwing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinxCoroutines" }
kotlinxIoCore = { module = "org.jetbrains.kotlinx:kotlinx-io-core", version.ref = "kotlinxIo" }
kotlinxIoOkio = { module = "org.jetbrains.kotlinx:kotlinx-io-okio", version.ref = "kotlinxIo" }

ktorClientContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktorSerializationKotlinxJson = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktorClientCore = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktorClientLogging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktorClientCio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }

kotlinLogging = { module = "io.github.oshai:kotlin-logging", version.ref = "kotlinLogging" }
slf4jSimple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }

koog = { module = "ai.koog:koog-agents", version.ref = "koog" }
koogPromptMarkdown = { module = "ai.koog:prompt-markdown", version.ref = "koog" }
mcp = { module = "io.modelcontextprotocol:kotlin-sdk", version.ref = "mcp" }
xemanticJsonSchema = { module = "com.xemantic.ai:xemantic-ai-tool-schema", version.ref = "xemanticJsonSchema" }
uriKmp = { module = "com.eygraber:uri-kmp", version.ref = "uriKmp" }
kodein = { module = "org.kodein.di:kodein-di", version.ref = "kodein" }

# Compose Frontend

material3Adaptive = { module = "org.jetbrains.compose.material3.adaptive:adaptive", version.ref = "material3Adaptive" }
androidxLifecycleViewmodel = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidxLifecycleViewmodel" }
kodeinCompose = { module = "org.kodein.di:kodein-di-framework-compose", version.ref = "kodein" }

markdownRenderer = { module = "com.mikepenz:multiplatform-markdown-renderer-m3", version.ref = "markdownRenderer" }
markdownRendererCoil = { module = "com.mikepenz:multiplatform-markdown-renderer-coil3", version.ref = "markdownRenderer" }
markdownRendererCode = { module = "com.mikepenz:multiplatform-markdown-renderer-code", version.ref = "markdownRenderer" }
fileKit = { module = "io.github.vinceglb:filekit-compose", version.ref = "fileKit" }
coil = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }
coilKtor = { module = "io.coil-kt.coil3:coil-network-ktor3", version.ref = "coil" }

# Discord Frontend
kordCore = { module = "dev.kord:kord-core", version.ref = "kord" }

# For tools
kotlinxCli = { module = "org.jetbrains.kotlinx:kotlinx-cli", version.ref = "kotlinxCli" }
slf4jNop = { module = "org.slf4j:slf4j-nop", version.ref = "slf4j" }
ksoup = { module = "com.fleeksoft.ksoup:ksoup-kotlinx", version.ref = "ksoup" }
flexmarkHtmlMarkdownConverter = { module = "com.vladsch.flexmark:flexmark-html2md-converter", version.ref = "flexmark" }

[bundles]
kotlinxEcosystem = ["kotlinxDatetime", "kotlinxSerialization", "kotlinxCoroutines", "kotlinxIoCore"]
ktorClient = ["ktorClientCore", "ktorClientLogging", "ktorClientContentNegotiation", "ktorSerializationKotlinxJson"]

[plugins]
kotlinPluginSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlinPluginAtomicfu = { id = "org.jetbrains.kotlinx.atomicfu", version.ref = "kotlinxAtomicfu" }

# Compose Frontend
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
composeGradle = { id = "org.jetbrains.compose", version.ref = "compose" }
composeHotReload = { id = "org.jetbrains.compose.hot-reload", version.ref = "composeHotReload" }

# For tools
shadow = { id = "com.gradleup.shadow", version.ref = "shadow" }
